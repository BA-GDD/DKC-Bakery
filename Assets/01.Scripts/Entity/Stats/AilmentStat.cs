using System;
using System.Collections.Generic;
using UnityEngine;

[Serializable]
public class AilmentStat
{
    private Dictionary<AilmentEnum, Ailment> _ailmentDictionary;


    public AilmentEnum currentAilment; //질병 및 디버프 상태

    public event Action<AilmentEnum> EndOFAilmentEvent; // 상태이상 종료시 발생

    public AilmentStat(Health _health)
    {
        _ailmentDictionary = new Dictionary<AilmentEnum, Ailment>();

        foreach (AilmentEnum ailment in Enum.GetValues(typeof(AilmentEnum)))
        {
            if (ailment == AilmentEnum.None) continue;

            Type t = Type.GetType($"{ailment}Ailment");

            Ailment a = Activator.CreateInstance(t, this, _health, ailment) as Ailment;
            _ailmentDictionary.Add(ailment, a);
        }
    }

    public void UpdateAilment()
    {
        AilmentDamage();
        foreach (AilmentEnum ailment in Enum.GetValues(typeof(AilmentEnum)))
        {
            if (ailment == AilmentEnum.None) continue;
            
            if(HasAilment(ailment))
                _ailmentDictionary[ailment].Update();
        }
    }
    public void CuredAilment(AilmentEnum ailment)
    {
        currentAilment ^= ailment; //XOR로 빼주고
        EndOFAilmentEvent?.Invoke(ailment); //종료 알림.
    }
    private void AilmentDamage()
    {
        foreach (AilmentEnum ailment in Enum.GetValues(typeof(AilmentEnum)))
        {
            if ((currentAilment & ailment) > 0)
            {
                Debug.Log(currentAilment);
            }
        }
    }
    public void UsedToAilment(AilmentEnum ailment)
    {
        if (HasAilment(ailment))
        {
            switch (ailment)
            {
                case AilmentEnum.None:
                    break;
                case AilmentEnum.Chilled:

                    break;
                case AilmentEnum.Shocked:
                    break;
            }
        }
    }


    //특정 디버프가 존재하는지 체크
    public bool HasAilment(AilmentEnum ailment)
    {
        return (currentAilment & ailment) > 0;
    }
    public int GetStackAilment(AilmentEnum ailment)
    {
        return _ailmentDictionary[ailment].stack;
    }

    public void ApplyAilments(AilmentEnum value, int turn)
    {
        Debug.Log(value);
        currentAilment |= value; //현재 상태이상에 추가 상태이상 덧씌우고

        //상태이상 새로 들어온 애들은 시간 갱신해주고. 
        if ((value & AilmentEnum.Chilled) > 0)
        {
            SetAilment(AilmentEnum.Chilled, turn);
        }
        else if ((value & AilmentEnum.Shocked) > 0)
        {
            SetAilment(AilmentEnum.Shocked, turn);
        }
    }

    //질병효과와 지속시간 셋팅
    private void SetAilment(AilmentEnum ailment, int turn)
    {
    }

}